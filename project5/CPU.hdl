// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
   	Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=inA);

   	// decoder part
    Not(in=instruction[15], out=isA);
    Not(in=isA, out=isC);

    // A-register loader
    And (a=isC, b=instruction[5], out=dest1Load);
    Or (a=isA, b=dest1Load, out=loadA);

    ARegister(in=inA, out=ARegOut, 
    		  out[0..14]=addressM, load=loadA); 				//A-register
    
    And (a=instruction[15], b=instruction[4], out=DLoad);		//check if dest-bit is on D-register
    DRegister (in=ALUOut, out=DRegOut, load=DLoad);				//D-register
    
    And (a=isC, b=instruction[12], out=ABit);

    Mux16 (a=ARegOut, b=inM, sel=ABit, out=yOut);
    
    ALU (x=DRegOut, 
    	 y=yOut, 
    	 zx=instruction[11], 
    	 nx=instruction[10],
    	 zy=instruction[9], 
    	 ny=instruction[8], 
    	 f=instruction[7], 
    	 no=instruction[6], 
    	 out=outM, 
    	 out=ALUOut, 
    	 zr=zero, 
    	 ng=negative);


    //PC load check
    Or (a=negative, b=zero, out=notPositive);
    Not (in=notPositive, out=positive); 				// create positive condition

    And (a=negative, b=instruction[2], out=JLT);
    And (a=zero, b=instruction[1], out=JEQ);
    And (a=positive, b=instruction[0], out=JGT);

    Or (a=JLT, b=JEQ, out=JLE);
    Or (a=JLE, b=JGT, out=JMP);

    And (a=JMP, b=instruction[15], out=jump);  			// jump if C instruction

    PC(in=ARegOut, load=jump, inc=true, reset=reset, out[0..14]=pc ); 

    // Only write to memory if this is C instruction
    And(a=instruction[15], b=instruction[3], out=writeM);
}